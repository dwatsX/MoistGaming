// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sprint.Data;

namespace Sprint.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201108201751_CreateApplicationSchema")]
    partial class CreateApplicationSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "ProviderKey", "LoginProvider");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Sprint.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GameId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasColumnName("Developer")
                        .HasColumnType("varchar(48)")
                        .HasMaxLength(48)
                        .IsUnicode(false);

                    b.Property<int>("GameTypeId")
                        .HasColumnName("GameTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(48)")
                        .HasMaxLength(48)
                        .IsUnicode(false);

                    b.Property<decimal>("RegularPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RegularPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("GameId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("Game");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            Developer = "SCS Software",
                            GameTypeId = 5,
                            Name = "Euro Truck Simulator 2",
                            RegularPrice = 21.99m
                        },
                        new
                        {
                            GameId = 2,
                            Developer = "EA Sports",
                            GameTypeId = 7,
                            Name = "Madden NFL 20",
                            RegularPrice = 29.99m
                        },
                        new
                        {
                            GameId = 3,
                            Developer = "Klei Entertainment",
                            GameTypeId = 3,
                            Name = "Don't Starve",
                            RegularPrice = 11.49m
                        },
                        new
                        {
                            GameId = 4,
                            Developer = "2K Games",
                            GameTypeId = 1,
                            Name = "Borderlands 3",
                            RegularPrice = 79.99m
                        },
                        new
                        {
                            GameId = 5,
                            Developer = "Crystal Dynamics",
                            GameTypeId = 2,
                            Name = "Tomb Raider",
                            RegularPrice = 19.99m
                        },
                        new
                        {
                            GameId = 6,
                            Developer = "Bethesda",
                            GameTypeId = 4,
                            Name = "Fallout: New Vegas",
                            RegularPrice = 10.99m
                        },
                        new
                        {
                            GameId = 7,
                            Developer = "Spiderling Studios",
                            GameTypeId = 5,
                            Name = "Besiege",
                            RegularPrice = 17.49m
                        },
                        new
                        {
                            GameId = 8,
                            Developer = "Squad",
                            GameTypeId = 5,
                            Name = "Kerbal Space Program",
                            RegularPrice = 43.99m
                        },
                        new
                        {
                            GameId = 9,
                            Developer = "Electronic Arts",
                            GameTypeId = 4,
                            Name = "Dragon Age: Origins",
                            RegularPrice = 26.99m
                        },
                        new
                        {
                            GameId = 10,
                            Developer = "Ubisoft",
                            GameTypeId = 2,
                            Name = "Far Cry 3",
                            RegularPrice = 39.99m
                        },
                        new
                        {
                            GameId = 11,
                            Developer = "Ubisoft",
                            GameTypeId = 2,
                            Name = "Far Cry 3 - Blood Dragon",
                            RegularPrice = 14.99m
                        },
                        new
                        {
                            GameId = 12,
                            Developer = "Mojang",
                            GameTypeId = 9,
                            Name = "Minecraft",
                            RegularPrice = 26.95m
                        },
                        new
                        {
                            GameId = 13,
                            Developer = "Roblox Corporation",
                            GameTypeId = 9,
                            Name = "Roblox",
                            RegularPrice = 0.0m
                        },
                        new
                        {
                            GameId = 14,
                            Developer = "Nintendo",
                            GameTypeId = 1,
                            Name = "Super Mario Odyssey",
                            RegularPrice = 59.99m
                        },
                        new
                        {
                            GameId = 15,
                            Developer = "Rockstar Games",
                            GameTypeId = 2,
                            Name = "Grand Theft Auto V",
                            RegularPrice = 29.99m
                        },
                        new
                        {
                            GameId = 16,
                            Developer = "Monomi Park",
                            GameTypeId = 2,
                            Name = "Slime Rancher",
                            RegularPrice = 21.99m
                        },
                        new
                        {
                            GameId = 17,
                            Developer = "Psyonix",
                            GameTypeId = 1,
                            Name = "Rocket League",
                            RegularPrice = 35.99m
                        },
                        new
                        {
                            GameId = 18,
                            Developer = "NetherRealm Studios",
                            GameTypeId = 1,
                            Name = "Mortal Kombat 11",
                            RegularPrice = 69.99m
                        },
                        new
                        {
                            GameId = 19,
                            Developer = "Nintendo",
                            GameTypeId = 2,
                            Name = "The Legend of Zelda: Breath of the Wild",
                            RegularPrice = 79.99m
                        },
                        new
                        {
                            GameId = 20,
                            Developer = "Activision",
                            GameTypeId = 1,
                            Name = "Call of Duty: Black Ops 4",
                            RegularPrice = 79.99m
                        },
                        new
                        {
                            GameId = 21,
                            Developer = "Bungie",
                            GameTypeId = 8,
                            Name = "Destiny 2",
                            RegularPrice = 0m
                        },
                        new
                        {
                            GameId = 22,
                            Developer = "Zenimax Online Studios",
                            GameTypeId = 8,
                            Name = "The Elder Scrolls® Online",
                            RegularPrice = 0m
                        },
                        new
                        {
                            GameId = 23,
                            Developer = "Milestone",
                            GameTypeId = 7,
                            Name = "WRC 3: FIA World Rally Championship",
                            RegularPrice = 39.99m
                        },
                        new
                        {
                            GameId = 24,
                            Developer = "EA Black Box",
                            GameTypeId = 7,
                            Name = "Need for Speed: Carbon",
                            RegularPrice = 19.99m
                        },
                        new
                        {
                            GameId = 25,
                            Developer = "Haemimont Games",
                            GameTypeId = 6,
                            Name = "Tropico 5",
                            RegularPrice = 22.79m
                        },
                        new
                        {
                            GameId = 26,
                            Developer = "Innersloth",
                            GameTypeId = 5,
                            Name = "Among Us",
                            RegularPrice = 5.69m
                        },
                        new
                        {
                            GameId = 27,
                            Developer = "Rockstar Games",
                            GameTypeId = 2,
                            Name = "Red Dead Redemption II",
                            RegularPrice = 79.99m
                        },
                        new
                        {
                            GameId = 28,
                            Developer = "Firaxis Games",
                            GameTypeId = 6,
                            Name = "Sid Meier's Civilization VI",
                            RegularPrice = 79.99m
                        },
                        new
                        {
                            GameId = 29,
                            Developer = "Guerrilla",
                            GameTypeId = 2,
                            Name = "Horizon Zero Dawn",
                            RegularPrice = 59.99m
                        },
                        new
                        {
                            GameId = 30,
                            Developer = "Bethesda",
                            GameTypeId = 4,
                            Name = "Fallout 4",
                            RegularPrice = 39.99m
                        });
                });

            modelBuilder.Entity("Sprint.Models.GameDiscount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DiscountId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DiscountFinish")
                        .HasColumnName("DiscountFinish")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnName("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DiscountStart")
                        .HasColumnName("DiscountStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnName("GameId")
                        .HasColumnType("int");

                    b.HasKey("DiscountId");

                    b.HasIndex("GameId");

                    b.ToTable("Discount");

                    b.HasData(
                        new
                        {
                            DiscountId = 1,
                            DiscountFinish = new DateTime(2020, 12, 8, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 19.99m,
                            DiscountStart = new DateTime(2020, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 30
                        },
                        new
                        {
                            DiscountId = 2,
                            DiscountFinish = new DateTime(2020, 12, 8, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 2.69m,
                            DiscountStart = new DateTime(2020, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 26
                        },
                        new
                        {
                            DiscountId = 3,
                            DiscountFinish = new DateTime(2020, 12, 8, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 59.99m,
                            DiscountStart = new DateTime(2020, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 19
                        },
                        new
                        {
                            DiscountId = 4,
                            DiscountFinish = new DateTime(2020, 12, 25, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 11.99m,
                            DiscountStart = new DateTime(2020, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 7
                        },
                        new
                        {
                            DiscountId = 5,
                            DiscountFinish = new DateTime(2020, 12, 25, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 12.49m,
                            DiscountStart = new DateTime(2020, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 16
                        },
                        new
                        {
                            DiscountId = 6,
                            DiscountFinish = new DateTime(2020, 12, 25, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 11.59m,
                            DiscountStart = new DateTime(2020, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GameId = 5
                        });
                });

            modelBuilder.Entity("Sprint.Models.GameImage", b =>
                {
                    b.Property<int>("GameImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GameImageId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnName("GameId")
                        .HasColumnType("int");

                    b.Property<int>("ImageType")
                        .HasColumnName("ImageType")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnName("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameImageId");

                    b.HasIndex("GameId");

                    b.ToTable("GameImage");

                    b.HasData(
                        new
                        {
                            GameImageId = 1,
                            GameId = 1,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/4c22bd444899d3b6047a10b20a2f26db.png"
                        },
                        new
                        {
                            GameImageId = 2,
                            GameId = 2,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/097e232de59f809f5a1cdf88e1240b08.png"
                        },
                        new
                        {
                            GameImageId = 3,
                            GameId = 3,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/b16a06a5ea94028944a81ad5bbdbb8ca.png"
                        },
                        new
                        {
                            GameImageId = 4,
                            GameId = 4,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/7e04e496f1cf3896708f48127a7b65de.png"
                        },
                        new
                        {
                            GameImageId = 5,
                            GameId = 5,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/6be910cdb73c47cb973a944c03f5c7b1.png"
                        },
                        new
                        {
                            GameImageId = 6,
                            GameId = 6,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/5248e5118c84beea359b6ea385393661.png"
                        },
                        new
                        {
                            GameImageId = 7,
                            GameId = 7,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/a3171cc0f610fdfdf460831fb25a3dc7.png"
                        },
                        new
                        {
                            GameImageId = 8,
                            GameId = 8,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/5e26566dffe850373e9a5121703034a1.png"
                        },
                        new
                        {
                            GameImageId = 9,
                            GameId = 9,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/c1537c9ed39baee3476c6fdd666b5fd8.png"
                        },
                        new
                        {
                            GameImageId = 10,
                            GameId = 10,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/84b3f2becbf70a03239d7fae55dcaa40.png"
                        },
                        new
                        {
                            GameImageId = 11,
                            GameId = 11,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/1051f72ed869290c51ee34a72b1d01df.png"
                        },
                        new
                        {
                            GameImageId = 12,
                            GameId = 12,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/6db2fc0f9848c8830f2c5ad73e78ea75.png"
                        },
                        new
                        {
                            GameImageId = 13,
                            GameId = 13,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/2a574bcb25a0ae1faad7c630370e6234.png"
                        },
                        new
                        {
                            GameImageId = 14,
                            GameId = 14,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/5549f6da5ec3b191b672e682e4735d71.png"
                        },
                        new
                        {
                            GameImageId = 15,
                            GameId = 15,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/3aa4cb2017fe681acd92bbea6b9f6015.png"
                        },
                        new
                        {
                            GameImageId = 16,
                            GameId = 16,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/5f65c233d57a4b31b1e4edbaa79bf6ca.png"
                        },
                        new
                        {
                            GameImageId = 17,
                            GameId = 17,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/ea3a48c74a9efb9a08635fe7990347cc.png"
                        },
                        new
                        {
                            GameImageId = 18,
                            GameId = 18,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/884738b4332ababd678ca505f4e04f4d.png"
                        },
                        new
                        {
                            GameImageId = 19,
                            GameId = 19,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/2da535ad78bb2e93aa448b1a4a61134e.png"
                        },
                        new
                        {
                            GameImageId = 20,
                            GameId = 20,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/cb0fb5b71dd8266417731afb0e7a0864.png"
                        },
                        new
                        {
                            GameImageId = 21,
                            GameId = 21,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/f5e083092550d2f93898e9829e677e39.png"
                        },
                        new
                        {
                            GameImageId = 22,
                            GameId = 22,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/56c12a4512e84416de450db11ab040c3.png"
                        },
                        new
                        {
                            GameImageId = 23,
                            GameId = 23,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/4a8520defd77a137222438d72ed7afd2.png"
                        },
                        new
                        {
                            GameImageId = 24,
                            GameId = 24,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/ee955e252af3c85e66e15864e31174fe.png"
                        },
                        new
                        {
                            GameImageId = 25,
                            GameId = 25,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/c967fb654df41177901d1f5f135bf9e6.png"
                        },
                        new
                        {
                            GameImageId = 26,
                            GameId = 26,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/75c0aa52af187c4cd20744efafa1c7c7.png"
                        },
                        new
                        {
                            GameImageId = 27,
                            GameId = 27,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/41b28a11da13a0384a9b75f95244e8e8.png"
                        },
                        new
                        {
                            GameImageId = 28,
                            GameId = 28,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/c9ee6a825655d889ae6a84bde2802bc2.png"
                        },
                        new
                        {
                            GameImageId = 29,
                            GameId = 29,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/5ec5d5702a083583b268f32dde14b419.png"
                        },
                        new
                        {
                            GameImageId = 30,
                            GameId = 30,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/60c60a4ffa03bde6f8c83533d465ef5c.png"
                        });
                });

            modelBuilder.Entity("Sprint.Models.GameType", b =>
                {
                    b.Property<int>("GameTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GameTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("GameTypeId");

                    b.ToTable("GameType");

                    b.HasData(
                        new
                        {
                            GameTypeId = 1,
                            Name = "Action"
                        },
                        new
                        {
                            GameTypeId = 2,
                            Name = "Action-Adventure"
                        },
                        new
                        {
                            GameTypeId = 3,
                            Name = "Adventure"
                        },
                        new
                        {
                            GameTypeId = 4,
                            Name = "Role-Playing"
                        },
                        new
                        {
                            GameTypeId = 5,
                            Name = "Simulation"
                        },
                        new
                        {
                            GameTypeId = 6,
                            Name = "Strategy"
                        },
                        new
                        {
                            GameTypeId = 7,
                            Name = "Sports"
                        },
                        new
                        {
                            GameTypeId = 8,
                            Name = "MMO"
                        },
                        new
                        {
                            GameTypeId = 9,
                            Name = "Sandbox"
                        });
                });

            modelBuilder.Entity("Sprint.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReviewId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnName("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnName("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewContent")
                        .IsRequired()
                        .HasColumnName("ReviewContent")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId", "GameId")
                        .IsUnique();

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Sprint.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "b852f83a-ac5d-4c3b-89ef-70e60c6f864b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "416ac185-ceef-4d72-9656-01f52fa2083c",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Sprint.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountNum")
                        .IsRequired()
                        .HasColumnName("AccountNum")
                        .HasColumnType("varchar(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnName("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("WishlistVisibility")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WishlistVisibility")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            AccountNum = "7d93dc65-40da-4b95-b0a6-8785be7efd20",
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "1f0b52f5-9fdc-4d96-9062-b31e2bd381d0",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            Gender = "Other",
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELD/iRjSZGy7qSRxUj5R0y08sqY+WiVMY473Ef502bgnGK+WYMBBb37WjZiUBONofw==",
                            PhoneNumber = "555-555-5555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            WishlistVisibility = 0
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            AccountNum = "f75d8b70-ce0f-42c5-9c05-3f996b263b34",
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0b792e51-b6fe-43cc-9835-8e94468178f5",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            Gender = "Other",
                            LockoutEnabled = false,
                            Name = "User",
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEcfez/McSJqZmI/rmoYmwnHRuYcuDvDW+qTvCgAdnyAk2FFYqECz/OOT3JGbgFHdw==",
                            PhoneNumber = "555-555-5555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user",
                            WishlistVisibility = 0
                        });
                });

            modelBuilder.Entity("Sprint.Models.UserGameWishlist", b =>
                {
                    b.Property<int>("UserGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserGameId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedOn")
                        .IsRequired()
                        .HasColumnName("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnName("GameId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserGameId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId", "GameId")
                        .IsUnique();

                    b.ToTable("UserGameWishlist");
                });

            modelBuilder.Entity("Sprint.Models.UserRelationship", b =>
                {
                    b.Property<int>("UserRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserRelationshipId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RelatedUserId")
                        .HasColumnName("RelatedUser")
                        .HasColumnType("int");

                    b.Property<int>("RelatingUserId")
                        .HasColumnName("RelatingUser")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Type")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("UserRelationshipId");

                    b.HasIndex("RelatedUserId");

                    b.HasIndex("RelatingUserId", "RelatedUserId")
                        .IsUnique();

                    b.ToTable("UserRelationship");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Sprint.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Sprint.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Sprint.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Sprint.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sprint.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Sprint.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sprint.Models.Game", b =>
                {
                    b.HasOne("Sprint.Models.GameType", "GameType")
                        .WithMany("Games")
                        .HasForeignKey("GameTypeId")
                        .HasConstraintName("FK_Game_GameType")
                        .IsRequired();
                });

            modelBuilder.Entity("Sprint.Models.GameDiscount", b =>
                {
                    b.HasOne("Sprint.Models.Game", "Game")
                        .WithMany("Discounts")
                        .HasForeignKey("GameId")
                        .HasConstraintName("FK_Game_Discount")
                        .IsRequired();
                });

            modelBuilder.Entity("Sprint.Models.GameImage", b =>
                {
                    b.HasOne("Sprint.Models.Game", "Game")
                        .WithMany("GameImages")
                        .HasForeignKey("GameId")
                        .HasConstraintName("FK_GameImage_Game")
                        .IsRequired();
                });

            modelBuilder.Entity("Sprint.Models.Review", b =>
                {
                    b.HasOne("Sprint.Models.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .HasConstraintName("FK_Review_Game")
                        .IsRequired();

                    b.HasOne("Sprint.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Review_User")
                        .IsRequired();
                });

            modelBuilder.Entity("Sprint.Models.UserGameWishlist", b =>
                {
                    b.HasOne("Sprint.Models.Game", "Game")
                        .WithMany("Wishlists")
                        .HasForeignKey("GameId")
                        .HasConstraintName("FK_Wishlist_Game")
                        .IsRequired();

                    b.HasOne("Sprint.Models.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Wishlist_User")
                        .IsRequired();
                });

            modelBuilder.Entity("Sprint.Models.UserRelationship", b =>
                {
                    b.HasOne("Sprint.Models.User", "RelatedUser")
                        .WithMany("RelatedRelationships")
                        .HasForeignKey("RelatedUserId")
                        .HasConstraintName("FK_User_Related")
                        .IsRequired();

                    b.HasOne("Sprint.Models.User", "RelatingUser")
                        .WithMany("RelatingRelationships")
                        .HasForeignKey("RelatingUserId")
                        .HasConstraintName("FK_User_Relating")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
