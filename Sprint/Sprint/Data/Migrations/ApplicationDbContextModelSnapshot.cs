// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sprint.Data;

namespace Sprint.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "ProviderKey", "LoginProvider");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Sprint.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GameId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasColumnName("Developer")
                        .HasColumnType("varchar(48)")
                        .HasMaxLength(48)
                        .IsUnicode(false);

                    b.Property<int>("GameTypeId")
                        .HasColumnName("GameTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(48)")
                        .HasMaxLength(48)
                        .IsUnicode(false);

                    b.HasKey("GameId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("Game");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            Developer = "Activision",
                            GameTypeId = 1,
                            Name = "Call of Duty: Modern Warfare"
                        },
                        new
                        {
                            GameId = 2,
                            Developer = "2K Sports",
                            GameTypeId = 7,
                            Name = "NBA 2K20"
                        },
                        new
                        {
                            GameId = 3,
                            Developer = "Electronic Arts",
                            GameTypeId = 7,
                            Name = "Madden NFL 20"
                        },
                        new
                        {
                            GameId = 4,
                            Developer = "2K Games",
                            GameTypeId = 1,
                            Name = "Borderlands 3"
                        },
                        new
                        {
                            GameId = 5,
                            Developer = "Warner Bros. Interactive Entertainment",
                            GameTypeId = 1,
                            Name = "Mortal Kombat II"
                        },
                        new
                        {
                            GameId = 6,
                            Developer = "Electronic Arts",
                            GameTypeId = 1,
                            Name = "Star Wars Jedi: Fallen Order"
                        },
                        new
                        {
                            GameId = 7,
                            Developer = "Nintendo",
                            GameTypeId = 1,
                            Name = "Super Smash Bros"
                        },
                        new
                        {
                            GameId = 8,
                            Developer = "Square Enix",
                            GameTypeId = 4,
                            Name = "Kingdom Hearts III"
                        },
                        new
                        {
                            GameId = 9,
                            Developer = "Ubisoft",
                            GameTypeId = 1,
                            Name = "Tom Clancy's The Division 2"
                        },
                        new
                        {
                            GameId = 10,
                            Developer = "Nintendo",
                            GameTypeId = 1,
                            Name = "Mario Kart 8 Deluxe"
                        },
                        new
                        {
                            GameId = 11,
                            Developer = "Epic Games",
                            GameTypeId = 9,
                            Name = "Fortnite"
                        },
                        new
                        {
                            GameId = 12,
                            Developer = "Mojang",
                            GameTypeId = 9,
                            Name = "Minecraft"
                        },
                        new
                        {
                            GameId = 13,
                            Developer = "Roblox Corporation",
                            GameTypeId = 9,
                            Name = "Roblox"
                        },
                        new
                        {
                            GameId = 14,
                            Developer = "Nintendo",
                            GameTypeId = 1,
                            Name = "Super Mario Odyssey"
                        },
                        new
                        {
                            GameId = 15,
                            Developer = "Rockstar Games",
                            GameTypeId = 1,
                            Name = "Grand Theft Auto V"
                        },
                        new
                        {
                            GameId = 16,
                            Developer = "Sony Interactive Entertainment",
                            GameTypeId = 1,
                            Name = "Marvel’s Spider-Man"
                        },
                        new
                        {
                            GameId = 17,
                            Developer = "Psyonix",
                            GameTypeId = 1,
                            Name = "Rocket League"
                        },
                        new
                        {
                            GameId = 18,
                            Developer = "Riot Games",
                            GameTypeId = 8,
                            Name = "League of Legends"
                        },
                        new
                        {
                            GameId = 19,
                            Developer = "Nintendo",
                            GameTypeId = 2,
                            Name = "The Legend of Zelda: Breath of the Wild"
                        },
                        new
                        {
                            GameId = 20,
                            Developer = "Activision",
                            GameTypeId = 1,
                            Name = "Call of Duty: Black Ops 4"
                        });
                });

            modelBuilder.Entity("Sprint.Models.GameImage", b =>
                {
                    b.Property<int>("GameImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GameImageId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnName("GameId")
                        .HasColumnType("int");

                    b.Property<int>("ImageType")
                        .HasColumnName("ImageType")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnName("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameImageId");

                    b.HasIndex("GameId");

                    b.ToTable("GameImage");

                    b.HasData(
                        new
                        {
                            GameImageId = 1,
                            GameId = 1,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/d5c91983451d0fa52a7ce530a3714ab7.png"
                        },
                        new
                        {
                            GameImageId = 2,
                            GameId = 2,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/767b2cc82cecc0385fe6f1086dd2c748.png"
                        },
                        new
                        {
                            GameImageId = 3,
                            GameId = 3,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/94cd0468d6f321ec192c9e301ba30e85.png"
                        },
                        new
                        {
                            GameImageId = 4,
                            GameId = 4,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/7e04e496f1cf3896708f48127a7b65de.png"
                        },
                        new
                        {
                            GameImageId = 5,
                            GameId = 5,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/9a3bd37a71b632e7726f149bbd771052.png"
                        },
                        new
                        {
                            GameImageId = 7,
                            GameId = 7,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/71e9c6620d381d60196ebe694840aaaa.png"
                        },
                        new
                        {
                            GameImageId = 9,
                            GameId = 9,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/29ddbdb402491a6aa97964a8139a1356.png"
                        },
                        new
                        {
                            GameImageId = 10,
                            GameId = 10,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/c6d4eb15f1e84a36eff58eca3627c82e.png"
                        },
                        new
                        {
                            GameImageId = 12,
                            GameId = 12,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/6db2fc0f9848c8830f2c5ad73e78ea75.png"
                        },
                        new
                        {
                            GameImageId = 13,
                            GameId = 13,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/2a574bcb25a0ae1faad7c630370e6234.png"
                        },
                        new
                        {
                            GameImageId = 14,
                            GameId = 14,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/5549f6da5ec3b191b672e682e4735d71.png"
                        },
                        new
                        {
                            GameImageId = 17,
                            GameId = 17,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/ea3a48c74a9efb9a08635fe7990347cc.png"
                        },
                        new
                        {
                            GameImageId = 18,
                            GameId = 18,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/f4a331b7a22d1b237565d8813a34d8ac.png"
                        },
                        new
                        {
                            GameImageId = 19,
                            GameId = 19,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/2da535ad78bb2e93aa448b1a4a61134e.png"
                        },
                        new
                        {
                            GameImageId = 20,
                            GameId = 20,
                            ImageType = 1,
                            ImageURL = "https://cdn.steamgriddb.com/grid/cb0fb5b71dd8266417731afb0e7a0864.png"
                        });
                });

            modelBuilder.Entity("Sprint.Models.GameType", b =>
                {
                    b.Property<int>("GameTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GameTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("GameTypeId");

                    b.ToTable("GameType");

                    b.HasData(
                        new
                        {
                            GameTypeId = 1,
                            Name = "Action"
                        },
                        new
                        {
                            GameTypeId = 2,
                            Name = "Action-Adventure"
                        },
                        new
                        {
                            GameTypeId = 3,
                            Name = "Adventure"
                        },
                        new
                        {
                            GameTypeId = 4,
                            Name = "Role-Playing"
                        },
                        new
                        {
                            GameTypeId = 5,
                            Name = "Simulation"
                        },
                        new
                        {
                            GameTypeId = 6,
                            Name = "Strategy"
                        },
                        new
                        {
                            GameTypeId = 7,
                            Name = "Sports"
                        },
                        new
                        {
                            GameTypeId = 8,
                            Name = "MMO"
                        },
                        new
                        {
                            GameTypeId = 9,
                            Name = "Sandbox"
                        });
                });

            modelBuilder.Entity("Sprint.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReviewId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnName("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnName("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewContent")
                        .IsRequired()
                        .HasColumnName("ReviewContent")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId", "GameId")
                        .IsUnique();

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Sprint.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1af2bd5b-0ea6-4e73-b154-99ecdf50a26d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "b9fec59b-9cce-42fd-b063-0d84e4f8f626",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Sprint.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountNum")
                        .IsRequired()
                        .HasColumnName("AccountNum")
                        .HasColumnType("varchar(36)")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            AccountNum = "9ad2731b-8284-4969-91a9-4249163d3383",
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c647cfb0-eb9e-490f-99ed-f821949ef080",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEIBWwLPax0P8kihtMpSpwI68pHdHP7pRiNmHGl8b3tIHncyJ6479yXjgzMqL+6ij1Q==",
                            PhoneNumber = "555-555-5555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            AccountNum = "f5e9d7a0-86f3-44c0-a632-6524fae724b4",
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "19ea9d1f-84ed-48c8-a72f-579903c15b0f",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "User",
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEC7VH3CIZz+tWu1POsi0h7fMeJpF3QO42PGuiF9WRPBOQf5nf+en4Azjn65ddZST8w==",
                            PhoneNumber = "555-555-5555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Sprint.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Sprint.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Sprint.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Sprint.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sprint.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Sprint.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sprint.Models.Game", b =>
                {
                    b.HasOne("Sprint.Models.GameType", "GameType")
                        .WithMany("Games")
                        .HasForeignKey("GameTypeId")
                        .HasConstraintName("FK_Game_GameType")
                        .IsRequired();
                });

            modelBuilder.Entity("Sprint.Models.GameImage", b =>
                {
                    b.HasOne("Sprint.Models.Game", "Game")
                        .WithMany("GameImages")
                        .HasForeignKey("GameId")
                        .HasConstraintName("FK_GameImage_Game")
                        .IsRequired();
                });

            modelBuilder.Entity("Sprint.Models.Review", b =>
                {
                    b.HasOne("Sprint.Models.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .HasConstraintName("FK_Review_Game")
                        .IsRequired();

                    b.HasOne("Sprint.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
